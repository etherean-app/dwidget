// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies,optimize_code_size
// @generated from protobuf file "etherean.proto" (package "etherean", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { CurveBalance } from "./curve";
import { Available } from "./summer_fi";
import { Vault } from "./summer_fi";
import { Collateral } from "./summer_fi";
import { Collateralization } from "./summer_fi";
import { Liquidation } from "./summer_fi";
import { ChainID } from "./chain_id";
import { Liquidity } from "./uniswap";
import { Reward } from "./uniswap";
import { Money as Money$ } from "./amount";
import { TokenFilter } from "./uniswap";
import { Money } from "./money";
import { Decimal } from "./decimal";
import { UserWallet } from "./user_wallet";
/**
 * @generated from protobuf message etherean.LidoRewardsRequest
 */
export interface LidoRewardsRequest {
    /**
     * @generated from protobuf field: etherean.type.UserWallet user_wallet = 1;
     */
    userWallet?: UserWallet;
    /**
     * @generated from protobuf field: optional uint32 limit = 2;
     */
    limit?: number; // count of days for calculate rewards e.g.
}
/**
 * @generated from protobuf message etherean.LidoRewardsWidgetReply
 */
export interface LidoRewardsWidgetReply {
    /**
     * @generated from protobuf field: google.type.Decimal steth_rewarded = 1;
     */
    stethRewarded?: Decimal;
    /**
     * @generated from protobuf field: google.type.Money steth_rewarded_in_usd = 2;
     */
    stethRewardedInUsd?: Money;
    /**
     * @generated from protobuf field: google.type.Decimal apr = 3;
     */
    apr?: Decimal;
    /**
     * @generated from protobuf field: google.type.Decimal average_apr = 4;
     */
    averageApr?: Decimal;
    /**
     * @generated from protobuf field: google.type.Money steth_price_eth = 5;
     */
    stethPriceEth?: Money;
    /**
     * @generated from protobuf field: google.type.Money steth_price_fiat = 6;
     */
    stethPriceFiat?: Money;
}
/**
 * @generated from protobuf message etherean.UniswapRewardsRequest
 */
export interface UniswapRewardsRequest {
    /**
     * @generated from protobuf field: etherean.type.UserWallet user_wallet = 1;
     */
    userWallet?: UserWallet;
    /**
     * list of tokens e.g. ["ETH", "DAI", "USDC"]
     *
     * @generated from protobuf field: repeated etherean.uniswap.TokenFilter tokens = 2;
     */
    tokens: TokenFilter[];
}
/**
 * @generated from protobuf message etherean.UniswapRewardsWidgetReply
 */
export interface UniswapRewardsWidgetReply {
    /**
     * @generated from protobuf field: etherean.type.Money deposited_amount_fiat = 1;
     */
    depositedAmountFiat?: Money$;
    /**
     * @generated from protobuf field: repeated etherean.uniswap.Reward unclaimed_rewards = 2;
     */
    unclaimedRewards: Reward[];
    /**
     * protolint:disable REPEATED_FIELD_NAMES_PLURALIZED
     *
     * @generated from protobuf field: repeated etherean.uniswap.Liquidity liquidity = 3;
     */
    liquidity: Liquidity[];
}
/**
 * @generated from protobuf message etherean.SumerFiRequest
 */
export interface SumerFiRequest {
    /**
     * @generated from protobuf field: etherean.type.UserWallet user_wallet = 1;
     */
    userWallet?: UserWallet;
    /**
     * Market name from here https://summer.fi/borrow?protocol=maker
     * (We've currently debugged WSTETH-A, other markets should be tested)
     *
     * @generated from protobuf field: string market = 2;
     */
    market: string;
    /**
     * @generated from protobuf field: etherean.type.ChainID chain_id = 3;
     */
    chainId: ChainID;
}
/**
 * @generated from protobuf message etherean.SummerFiWidgetReply
 */
export interface SummerFiWidgetReply {
    /**
     * @generated from protobuf field: etherean.summerfi.Liquidation liquidation = 1;
     */
    liquidation?: Liquidation;
    /**
     * @generated from protobuf field: etherean.summerfi.Collateralization collateralization = 2;
     */
    collateralization?: Collateralization;
    /**
     * @generated from protobuf field: etherean.summerfi.Collateral collateral = 3;
     */
    collateral?: Collateral;
    /**
     * @generated from protobuf field: etherean.summerfi.Vault vault = 4;
     */
    vault?: Vault;
    /**
     * @generated from protobuf field: etherean.summerfi.Available available = 5;
     */
    available?: Available;
}
/**
 * @generated from protobuf message etherean.CurveRequest
 */
export interface CurveRequest {
    /**
     * @generated from protobuf field: etherean.type.UserWallet user_wallet = 1;
     */
    userWallet?: UserWallet;
    /**
     * LP token symbol can be taken from here
     * https://curve.fi/#/ethereum/pools/steth/deposit -> Token (e.g. 'steCRV')
     *
     * @generated from protobuf field: string pool = 2;
     */
    pool: string;
}
/**
 * @generated from protobuf message etherean.CurveWidgetReply
 */
export interface CurveWidgetReply {
    /**
     * @generated from protobuf field: string pool = 1;
     */
    pool: string;
    /**
     * @generated from protobuf field: repeated etherean.type.CurveBalance balances = 2;
     */
    balances: CurveBalance[];
    /**
     * @generated from protobuf field: repeated etherean.type.CurveBalance rewards = 3;
     */
    rewards: CurveBalance[];
    /**
     * @generated from protobuf field: etherean.type.Money sum_amount = 4;
     */
    sumAmount?: Money$;
}
// @generated message type with reflection information, may provide speed optimized methods
class LidoRewardsRequest$Type extends MessageType<LidoRewardsRequest> {
    constructor() {
        super("etherean.LidoRewardsRequest", [
            { no: 1, name: "user_wallet", kind: "message", T: () => UserWallet },
            { no: 2, name: "limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.LidoRewardsRequest
 */
export const LidoRewardsRequest = new LidoRewardsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LidoRewardsWidgetReply$Type extends MessageType<LidoRewardsWidgetReply> {
    constructor() {
        super("etherean.LidoRewardsWidgetReply", [
            { no: 1, name: "steth_rewarded", kind: "message", T: () => Decimal },
            { no: 2, name: "steth_rewarded_in_usd", kind: "message", T: () => Money },
            { no: 3, name: "apr", kind: "message", T: () => Decimal },
            { no: 4, name: "average_apr", kind: "message", T: () => Decimal },
            { no: 5, name: "steth_price_eth", kind: "message", T: () => Money },
            { no: 6, name: "steth_price_fiat", kind: "message", T: () => Money }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.LidoRewardsWidgetReply
 */
export const LidoRewardsWidgetReply = new LidoRewardsWidgetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UniswapRewardsRequest$Type extends MessageType<UniswapRewardsRequest> {
    constructor() {
        super("etherean.UniswapRewardsRequest", [
            { no: 1, name: "user_wallet", kind: "message", T: () => UserWallet },
            { no: 2, name: "tokens", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TokenFilter }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.UniswapRewardsRequest
 */
export const UniswapRewardsRequest = new UniswapRewardsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UniswapRewardsWidgetReply$Type extends MessageType<UniswapRewardsWidgetReply> {
    constructor() {
        super("etherean.UniswapRewardsWidgetReply", [
            { no: 1, name: "deposited_amount_fiat", kind: "message", T: () => Money$ },
            { no: 2, name: "unclaimed_rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Reward },
            { no: 3, name: "liquidity", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Liquidity }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.UniswapRewardsWidgetReply
 */
export const UniswapRewardsWidgetReply = new UniswapRewardsWidgetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumerFiRequest$Type extends MessageType<SumerFiRequest> {
    constructor() {
        super("etherean.SumerFiRequest", [
            { no: 1, name: "user_wallet", kind: "message", T: () => UserWallet },
            { no: 2, name: "market", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chain_id", kind: "enum", T: () => ["etherean.type.ChainID", ChainID] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.SumerFiRequest
 */
export const SumerFiRequest = new SumerFiRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerFiWidgetReply$Type extends MessageType<SummerFiWidgetReply> {
    constructor() {
        super("etherean.SummerFiWidgetReply", [
            { no: 1, name: "liquidation", kind: "message", T: () => Liquidation },
            { no: 2, name: "collateralization", kind: "message", T: () => Collateralization },
            { no: 3, name: "collateral", kind: "message", T: () => Collateral },
            { no: 4, name: "vault", kind: "message", T: () => Vault },
            { no: 5, name: "available", kind: "message", T: () => Available }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.SummerFiWidgetReply
 */
export const SummerFiWidgetReply = new SummerFiWidgetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CurveRequest$Type extends MessageType<CurveRequest> {
    constructor() {
        super("etherean.CurveRequest", [
            { no: 1, name: "user_wallet", kind: "message", T: () => UserWallet },
            { no: 2, name: "pool", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.CurveRequest
 */
export const CurveRequest = new CurveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CurveWidgetReply$Type extends MessageType<CurveWidgetReply> {
    constructor() {
        super("etherean.CurveWidgetReply", [
            { no: 1, name: "pool", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "balances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CurveBalance },
            { no: 3, name: "rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CurveBalance },
            { no: 4, name: "sum_amount", kind: "message", T: () => Money$ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.CurveWidgetReply
 */
export const CurveWidgetReply = new CurveWidgetReply$Type();
/**
 * @generated ServiceType for protobuf service etherean.EthereanGrpc
 */
export const EthereanGrpc = new ServiceType("etherean.EthereanGrpc", [
    { name: "GetLidoRewardsWidget", options: {}, I: LidoRewardsRequest, O: LidoRewardsWidgetReply },
    { name: "GetUniswapRewardsWidget", options: {}, I: UniswapRewardsRequest, O: UniswapRewardsWidgetReply },
    { name: "GetSummerFiWidget", options: {}, I: SumerFiRequest, O: SummerFiWidgetReply },
    { name: "GetCurveWidget", options: {}, I: CurveRequest, O: CurveWidgetReply }
]);
