// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies,optimize_code_size
// @generated from protobuf file "uniswap.proto" (package "etherean.uniswap", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
import { Decimal } from "./decimal";
/**
 * @generated from protobuf message etherean.uniswap.Token
 */
export interface Token {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string symbol = 3;
     */
    symbol: string;
    /**
     * @generated from protobuf field: uint32 decimals = 4;
     */
    decimals: number;
}
/**
 * @generated from protobuf message etherean.uniswap.Money
 */
export interface Money {
    /**
     * @generated from protobuf field: string currency = 1;
     */
    currency: string;
    /**
     * @generated from protobuf field: google.type.Decimal value = 2;
     */
    value?: Decimal;
}
/**
 * @generated from protobuf message etherean.uniswap.Amount
 */
export interface Amount {
    /**
     * @generated from protobuf field: google.type.Decimal ui_amount = 1;
     */
    uiAmount?: Decimal;
    /**
     * @generated from protobuf field: etherean.uniswap.Money fiat_amount = 2;
     */
    fiatAmount?: Money;
}
/**
 * @generated from protobuf message etherean.uniswap.TokenFilter
 */
export interface TokenFilter {
    /**
     * @generated from protobuf field: optional string address = 1;
     */
    address?: string;
    /**
     * @generated from protobuf field: optional string symbol = 2;
     */
    symbol?: string;
}
/**
 * @generated from protobuf message etherean.uniswap.Liquidity
 */
export interface Liquidity {
    /**
     * @generated from protobuf field: etherean.uniswap.Token token = 1;
     */
    token?: Token;
    /**
     * @generated from protobuf field: etherean.uniswap.Amount amount = 2;
     */
    amount?: Amount;
    /**
     * @generated from protobuf field: float percent = 3;
     */
    percent: number;
}
/**
 * @generated from protobuf message etherean.uniswap.Reward
 */
export interface Reward {
    /**
     * @generated from protobuf field: etherean.uniswap.Token token = 1;
     */
    token?: Token;
    /**
     * @generated from protobuf field: etherean.uniswap.Amount amount = 2;
     */
    amount?: Amount;
}
// @generated message type with reflection information, may provide speed optimized methods
class Token$Type extends MessageType<Token> {
    constructor() {
        super("etherean.uniswap.Token", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "decimals", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.uniswap.Token
 */
export const Token = new Token$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Money$Type extends MessageType<Money> {
    constructor() {
        super("etherean.uniswap.Money", [
            { no: 1, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "message", T: () => Decimal }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.uniswap.Money
 */
export const Money = new Money$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Amount$Type extends MessageType<Amount> {
    constructor() {
        super("etherean.uniswap.Amount", [
            { no: 1, name: "ui_amount", kind: "message", T: () => Decimal },
            { no: 2, name: "fiat_amount", kind: "message", T: () => Money }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.uniswap.Amount
 */
export const Amount = new Amount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenFilter$Type extends MessageType<TokenFilter> {
    constructor() {
        super("etherean.uniswap.TokenFilter", [
            { no: 1, name: "address", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "symbol", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.uniswap.TokenFilter
 */
export const TokenFilter = new TokenFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Liquidity$Type extends MessageType<Liquidity> {
    constructor() {
        super("etherean.uniswap.Liquidity", [
            { no: 1, name: "token", kind: "message", T: () => Token },
            { no: 2, name: "amount", kind: "message", T: () => Amount },
            { no: 3, name: "percent", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.uniswap.Liquidity
 */
export const Liquidity = new Liquidity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reward$Type extends MessageType<Reward> {
    constructor() {
        super("etherean.uniswap.Reward", [
            { no: 1, name: "token", kind: "message", T: () => Token },
            { no: 2, name: "amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.uniswap.Reward
 */
export const Reward = new Reward$Type();
