// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies,optimize_code_size
// @generated from protobuf file "assets.proto" (package "etherean.assets", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { Money } from "./money";
import { Decimal } from "./decimal";
import { DecU256 } from "./u256";
import { UserWallet } from "./user_wallet";
/**
 * @generated from protobuf message etherean.assets.AssetsRequest
 */
export interface AssetsRequest {
    /**
     * @generated from protobuf field: etherean.type.UserWallet wallet = 1;
     */
    wallet?: UserWallet;
}
/**
 * @generated from protobuf message etherean.assets.AssetsResponse
 */
export interface AssetsResponse {
    /**
     * @generated from protobuf field: etherean.assets.TokenAsset native = 1;
     */
    native?: TokenAsset;
    /**
     * @generated from protobuf field: etherean.assets.DomainName domain = 2;
     */
    domain?: DomainName;
    /**
     * @generated from protobuf field: map<string, etherean.assets.TokenAsset> tokens = 3;
     */
    tokens: {
        [key: string]: TokenAsset;
    };
}
/**
 * @generated from protobuf message etherean.assets.DomainName
 */
export interface DomainName {
    /**
     * @generated from protobuf field: string domain = 1;
     */
    domain: string;
}
/**
 * @generated from protobuf message etherean.assets.Amount
 */
export interface Amount {
    /**
     * @generated from protobuf field: etherean.type.DecU256 amount = 1;
     */
    amount?: DecU256;
    /**
     * @generated from protobuf field: google.type.Decimal ui_amount = 2;
     */
    uiAmount?: Decimal;
    /**
     * @generated from protobuf field: google.type.Money fiat_amount = 3;
     */
    fiatAmount?: Money;
}
/**
 * @generated from protobuf message etherean.assets.Token
 */
export interface Token {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string symbol = 2;
     */
    symbol?: string;
    /**
     * @generated from protobuf field: optional uint32 decimals = 3;
     */
    decimals?: number;
    /**
     * @generated from protobuf field: optional string logo = 4;
     */
    logo?: string;
    /**
     * @generated from protobuf field: optional string coingecko_id = 5;
     */
    coingeckoId?: string;
    /**
     * @generated from protobuf field: optional string thumbnail = 6;
     */
    thumbnail?: string;
}
/**
 * @generated from protobuf message etherean.assets.TokenAsset
 */
export interface TokenAsset {
    /**
     * @generated from protobuf field: etherean.assets.Token meta = 1;
     */
    meta?: Token;
    /**
     * @generated from protobuf field: etherean.assets.ExchangeRate price = 2;
     */
    price?: ExchangeRate;
    /**
     * @generated from protobuf field: etherean.assets.Amount amount = 3;
     */
    amount?: Amount;
}
/**
 * @generated from protobuf message etherean.assets.ExchangeRate
 */
export interface ExchangeRate {
    /**
     * @generated from protobuf field: google.type.Money exchange_rate = 1;
     */
    exchangeRate?: Money;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_updated_at = 2;
     */
    lastUpdatedAt?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class AssetsRequest$Type extends MessageType<AssetsRequest> {
    constructor() {
        super("etherean.assets.AssetsRequest", [
            { no: 1, name: "wallet", kind: "message", T: () => UserWallet }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.assets.AssetsRequest
 */
export const AssetsRequest = new AssetsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetsResponse$Type extends MessageType<AssetsResponse> {
    constructor() {
        super("etherean.assets.AssetsResponse", [
            { no: 1, name: "native", kind: "message", T: () => TokenAsset },
            { no: 2, name: "domain", kind: "message", T: () => DomainName },
            { no: 3, name: "tokens", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => TokenAsset } }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.assets.AssetsResponse
 */
export const AssetsResponse = new AssetsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DomainName$Type extends MessageType<DomainName> {
    constructor() {
        super("etherean.assets.DomainName", [
            { no: 1, name: "domain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.assets.DomainName
 */
export const DomainName = new DomainName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Amount$Type extends MessageType<Amount> {
    constructor() {
        super("etherean.assets.Amount", [
            { no: 1, name: "amount", kind: "message", T: () => DecU256 },
            { no: 2, name: "ui_amount", kind: "message", T: () => Decimal },
            { no: 3, name: "fiat_amount", kind: "message", T: () => Money }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.assets.Amount
 */
export const Amount = new Amount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Token$Type extends MessageType<Token> {
    constructor() {
        super("etherean.assets.Token", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "symbol", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "decimals", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "logo", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "coingecko_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "thumbnail", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.assets.Token
 */
export const Token = new Token$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenAsset$Type extends MessageType<TokenAsset> {
    constructor() {
        super("etherean.assets.TokenAsset", [
            { no: 1, name: "meta", kind: "message", T: () => Token },
            { no: 2, name: "price", kind: "message", T: () => ExchangeRate },
            { no: 3, name: "amount", kind: "message", T: () => Amount }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.assets.TokenAsset
 */
export const TokenAsset = new TokenAsset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExchangeRate$Type extends MessageType<ExchangeRate> {
    constructor() {
        super("etherean.assets.ExchangeRate", [
            { no: 1, name: "exchange_rate", kind: "message", T: () => Money },
            { no: 2, name: "last_updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message etherean.assets.ExchangeRate
 */
export const ExchangeRate = new ExchangeRate$Type();
/**
 * @generated ServiceType for protobuf service etherean.assets.AssetService
 */
export const AssetService = new ServiceType("etherean.assets.AssetService", [
    { name: "GetAssets", options: {}, I: AssetsRequest, O: AssetsResponse }
]);
